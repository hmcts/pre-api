package uk.gov.hmcts.reform.preapi.controllers;

import com.fasterxml.jackson.core.JsonProcessingException;
import io.restassured.response.Response;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.params.ParameterizedTest;
import org.junit.jupiter.params.provider.EnumSource;
import org.junit.jupiter.params.provider.NullSource;
import uk.gov.hmcts.reform.preapi.controllers.params.TestingSupportRoles;
import uk.gov.hmcts.reform.preapi.dto.AuditDTO;
import uk.gov.hmcts.reform.preapi.dto.CreateAuditDTO;
import uk.gov.hmcts.reform.preapi.enums.AuditLogSource;
import uk.gov.hmcts.reform.preapi.util.FunctionalTestBase;

import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;

public class AuditControllerFT extends FunctionalTestBase {

    @DisplayName("Should fail to update an audit record as they are immutable")
    @Test
    void updateAuditFailure() throws JsonProcessingException {
        var audit = new CreateAuditDTO();
        audit.setId(UUID.randomUUID());
        audit.setAuditDetails(OBJECT_MAPPER.readTree("{\"test\": \"test\"}"));
        audit.setSource(AuditLogSource.AUTO);

        var success = putAudit(audit);
        assertResponseCode(success, 201);

        var error = putAudit(audit);
        assertResponseCode(error, 400);
        assertThat(error.body().jsonPath().getString("message"))
            .isEqualTo("Data is immutable and cannot be changed. Id: " + audit.getId());
    }

    private Response putAudit(CreateAuditDTO dto) throws JsonProcessingException {
        return doPutRequest(
            AUDIT_ENDPOINT + dto.getId(),
            OBJECT_MAPPER.writeValueAsString(dto),
            TestingSupportRoles.SUPER_USER
        );
    }

    @DisplayName("Should sort by created at desc")
    @Test
    void getAuditLogsSortBy() throws JsonProcessingException {
        var audit1 = new CreateAuditDTO();
        audit1.setId(UUID.randomUUID());
        audit1.setAuditDetails(OBJECT_MAPPER.readTree("{\"test\": \"test1\"}"));
        audit1.setSource(AuditLogSource.AUTO);

        var success1 = putAudit(audit1);
        assertResponseCode(success1, 201);

        var audit2 = new CreateAuditDTO();
        audit2.setId(UUID.randomUUID());
        audit2.setAuditDetails(OBJECT_MAPPER.readTree("{\"test\": \"test2\"}"));
        audit2.setSource(AuditLogSource.AUTO);

        var success2 = putAudit(audit2);
        assertResponseCode(success2, 201);

        var getAuditLogs1 = doGetRequest("/audit", TestingSupportRoles.SUPER_USER);

        assertResponseCode(getAuditLogs1, 200);
        var auditLogs1 = getAuditLogs1.jsonPath().getList("_embedded.auditDTOList", AuditDTO.class);

        // default sort by createdAt desc
        assertThat(auditLogs1.size()).isEqualTo(20);
        // get index 1, as index 0 is the GET generated by the AuditListener audit method
        assertThat(auditLogs1.get(1).getId()).isEqualTo(audit2.getId());
        assertThat(auditLogs1.get(2).getCreatedAt()).isAfter(auditLogs1.getLast().getCreatedAt());
    }

    @ParameterizedTest
    @NullSource
    @EnumSource(value = TestingSupportRoles.class, names = "SUPER_USER", mode = EnumSource.Mode.EXCLUDE)
    @DisplayName("Unauthorised use of endpoints should return 403 (or 401 for null authorisation)")
    void unauthorisedRequestsReturn403Or401(TestingSupportRoles testingSupportRole) throws JsonProcessingException {
        var getAuditLogsResponse = doGetRequest("/audit", testingSupportRole);
        if (testingSupportRole != null) {
            assertResponseCode(getAuditLogsResponse, 403);
        } else {
            assertResponseCode(getAuditLogsResponse, 401);
        }
    }
}
